---

- name: decide the task to find owner uid
  set_fact: 
    find_owner_uid_task: "{{ 'find_replicaset_uid' if (target_kind == 'Deployment')  else 'find_daemon_stateful_set_uid' }}"


- name: find owner uid of target_kind
  ansible.builtin.include_tasks: "{{find_owner_uid_task}}.yml"



- name: Get a list of all Running pods from owner_uid
  k8s_info:
    kind: Pod
    namespace: "{{namespace}}"
    validate_certs: false
    field_selectors:
      - status.phase=Running           
  register: pod_list



- name: Get a list of all Running pods from capture namespace
  k8s_info:
    kind: Pod
    namespace: default
    validate_certs: false
    field_selectors:
      - status.phase=Running
  register: capture_pod_info


- set_fact:
    discovered_pods_info: "{{ pod_list | json_query(query_info) }}"
    capturing_pods_names: "{{ capture_pod_info | json_query('resources[].metadata.name') }}"
  vars:
    query_info: "resources[?metadata.ownerReferences[0].uid == '{{owner_uid}}'].{Node: spec.nodeName, Pod_Name: metadata.name, Pod_Uid: metadata.uid }"       


- set_fact:
    new_capture_pods_names:  "{{ new_capture_pods_names | default([]) + [node_name +'-'+item.Pod_Uid]}}"
  vars:
    node_name: "{{item.Node.split('.')[0]}}"
  with_items:
    - "{{discovered_pods_info}}"        
    

- name: create capture pods if desired pods not a subset of capture pods
  ansible.builtin.include_tasks: create_captue_pods.yml
  when: "{{ new_capture_pods_names is not subset(capturing_pods_names)}}"
    
- name: delete all completed pods 
  ansible.builtin.include_tasks: delete_completed_captue_pods.yml
    
